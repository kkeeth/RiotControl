<item-app>
  <h3>Gadget Browser <a href="https://github.com/kkeeth/riot-control">(GitHub)</a></h3>
  <div>Notice the URL routing, back button works as expected.</div>
  <br/>
  <div if={ !state.edit }>
    <span>Search:</span>
    <br/>
    <input name='input' onkeyup={ search } />
    <form onsubmit={ clear }>
      <button disabled={ !txt }>Clear</button>
    </form>
    <router base={ base }>
      <ul>
        <li each={ item in state.items }>
          <a href={ `view/${item.id}` }>{ item.title }</a>
        </li>
      </ul>

      <route path="/:id">
        <p>{ getText(route) }</p>
        <item-detail item={ state.detail } />
      </route>
      <route path="(.*)">
        <p>{ getText(route) }</p>
      </route>
    </router>
    <div if={ !state.detail }>
      <span>Choose a product.</span>
    </div>
    <br/>
    <div>
      <button onclick={ add }>Add</button>
    </div>
  </div>
  <div if={ state.edit }>
    <form onsubmit={ submit }>
      <input name='title'>
      <button>Submit</button>
    </form>
    <button onclick={ cancel }>Cancel</button>
  </div>

  <script>
    // This is essentially the equivalent of the Flux view-controller.
    // Could be broken down further into more sub-componenets, if you wished to re-use views.
    export default {
      base: `${window.location.origin}/view`,
      state: {
        items: [],
        txt: null,
        detail: null,
        edit: false
      },
      onBeforeMount(props, state) {
        RiotControl.on('item_list_changed', (items) => {
          state.items = items
          this.update()
        })

        RiotControl.on('item_detail_changed', (item) => {
          state.edit = false
          state.detail = item
          riot.update()
        })

        RiotControl.on('item_detail_create', () => {
          state.edit = true
          this.update()
        })
      },
      onMounted() {
        RiotControl.trigger('item_list_init')
      },
      getText(route) {
        console.log(route)
        return "route"
      },
      add(e) {
        route('add')
      },
      search(e) {
        this.state.txt = e.target.value
        RiotControl.trigger('item_list_search', this.state.txt)
      },
      clear(e) {
        this.state.txt = ''
        this.input.value = ''
        RiotControl.trigger('item_list_search','')
      },
      submit(e) {
        e.preventDefault()
        RiotControl.trigger('item_detail_add', e.target.title.value)
        e.target.title.value = ''
        this.state.edit = false
        route('view')
      },
      cancel(e) {
        // console.log(this.$('input'))
        // this.title.value = ''
        this.state.edit = false
        route('view')
      }
    }
  </script>

</item-app>
